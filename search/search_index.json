{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview Hyperscale Compliance is an API-based interface that is designed to enhance the performance of masking large datasets. It allows you to achieve faster masking results using the existing Delphix Masking offering without adding the complexity of configuring multiple jobs. Hyperscale Compliance first breaks the large and complex datasets into numerous modules and then orchestrates the masking jobs across multiple masking engines. In general, datasets larger than 1 TB in size will see improved masking performance when run on the Hyperscale architecture. The Masking Platform Delphix Masking is a multi-user, browser-based web application that provides complete, secure, and scalable software for your sensitive data discovery, masking, and tokenization needs while meeting enterprise-class infrastructure requirements. To read further about masking features and architecture, read the Masking Documentation . Hyperscale Compliance Architecture\u200b For achieving faster masking results, Hyperscale Compliance uses bulk import or export utilities of data sources. Using these utilities, it exports the data into delimited files. Hyperscale Compliance engine then splits the exported data into multiple modules of smaller chunks and configures the masking jobs of all the respective chunks across multiple masking engines. Upon successful completion of the masking jobs, the masked data is imported back into the database. Hyperscale Compliance Components The Hyperscale Compliance architecture consists of four components mainly; the Hyperscale Compliance Engine, Source/Target Connectors, the Masking Engine Cluster, and the Staging Server. Hyperscale Compliance Engine The Hyperscale Compliance Engine is responsible for horizontally scaling the masking process. It does so by taking a series of files (provided by a source connector) and initiating multiple parallel masking jobs across nodes in the masking engine cluster. Depending on the number of nodes in the cluster, you can increase or decrease the total throughput of an individual masking job. Currently, the Hyperscale Compliance Engine supports the following two strategies to distribute the masking jobs across nodes available : Intelligent Load Balancing : This strategy considers each masking engine\u2019s current capacity before assigning any masking jobs to the node masking engines. It calculates the capacity using available resources on node masking engines and already running masking jobs on the engines. Round Robin Load Balancing : This strategy simply distributes the masking jobs to all the node masking engines using the round robin algorithm. Source and Target Connectors\u200b The Source Connectors are responsible for unloading data from the system of record (SOR) into a series of files located in the staging area. These connectors leverage bulk unload operations offered by the SOR and are therefore unique to each other. The prerequisites for running each connector vary slightly, but always require network access to the SOR from the host running the connector and credentials to run the appropriate unload commands. Note Source/Target Connectors are not part of the current Hyperscale Compliance solution and are out of scope for the current release. They will be part of an upcoming release. You are advised to contact your respective Account Managers to discuss Delphix building the connectors required for your respective use case. Staging Area The Staging Area is where data from the SOR is written to a series of files by the Source Connector. It can be a file system that supports NFS protocol. The file system can be attached volumes, or it can be supplied via the Delphix Virtualization Engine vFile feature. In either case, there must be enough storage available to hold the dataset in an uncompressed format. Masking Engine Cluster The Masking Engine Cluster is a group of Delphix Masking engines (version 6.0.7 and later) leveraged by the Hyperscale Compliance Engine to run large masking jobs in parallel. For installing and configuring the Masking engine procedures, see Masking Documentation . Next Steps Read about Installing Hyperscale Compliance tar . Read about the Network Requirements of the Hyperscale Compliance . Read about Accessing the Hyperscale Compliance APIs .","title":"Overview"},{"location":"#overview","text":"Hyperscale Compliance is an API-based interface that is designed to enhance the performance of masking large datasets. It allows you to achieve faster masking results using the existing Delphix Masking offering without adding the complexity of configuring multiple jobs. Hyperscale Compliance first breaks the large and complex datasets into numerous modules and then orchestrates the masking jobs across multiple masking engines. In general, datasets larger than 1 TB in size will see improved masking performance when run on the Hyperscale architecture.","title":"Overview"},{"location":"#the-masking-platform","text":"Delphix Masking is a multi-user, browser-based web application that provides complete, secure, and scalable software for your sensitive data discovery, masking, and tokenization needs while meeting enterprise-class infrastructure requirements. To read further about masking features and architecture, read the Masking Documentation .","title":"The Masking Platform"},{"location":"#hyperscale-compliance-architecture","text":"For achieving faster masking results, Hyperscale Compliance uses bulk import or export utilities of data sources. Using these utilities, it exports the data into delimited files. Hyperscale Compliance engine then splits the exported data into multiple modules of smaller chunks and configures the masking jobs of all the respective chunks across multiple masking engines. Upon successful completion of the masking jobs, the masked data is imported back into the database.","title":"Hyperscale Compliance Architecture\u200b"},{"location":"#hyperscale-compliance-components","text":"The Hyperscale Compliance architecture consists of four components mainly; the Hyperscale Compliance Engine, Source/Target Connectors, the Masking Engine Cluster, and the Staging Server.","title":"Hyperscale Compliance Components"},{"location":"#hyperscale-compliance-engine","text":"The Hyperscale Compliance Engine is responsible for horizontally scaling the masking process. It does so by taking a series of files (provided by a source connector) and initiating multiple parallel masking jobs across nodes in the masking engine cluster. Depending on the number of nodes in the cluster, you can increase or decrease the total throughput of an individual masking job. Currently, the Hyperscale Compliance Engine supports the following two strategies to distribute the masking jobs across nodes available : Intelligent Load Balancing : This strategy considers each masking engine\u2019s current capacity before assigning any masking jobs to the node masking engines. It calculates the capacity using available resources on node masking engines and already running masking jobs on the engines. Round Robin Load Balancing : This strategy simply distributes the masking jobs to all the node masking engines using the round robin algorithm.","title":"Hyperscale Compliance Engine"},{"location":"#source-and-target-connectors","text":"The Source Connectors are responsible for unloading data from the system of record (SOR) into a series of files located in the staging area. These connectors leverage bulk unload operations offered by the SOR and are therefore unique to each other. The prerequisites for running each connector vary slightly, but always require network access to the SOR from the host running the connector and credentials to run the appropriate unload commands. Note Source/Target Connectors are not part of the current Hyperscale Compliance solution and are out of scope for the current release. They will be part of an upcoming release. You are advised to contact your respective Account Managers to discuss Delphix building the connectors required for your respective use case.","title":"Source and Target Connectors\u200b"},{"location":"#staging-area","text":"The Staging Area is where data from the SOR is written to a series of files by the Source Connector. It can be a file system that supports NFS protocol. The file system can be attached volumes, or it can be supplied via the Delphix Virtualization Engine vFile feature. In either case, there must be enough storage available to hold the dataset in an uncompressed format.","title":"Staging Area"},{"location":"#masking-engine-cluster","text":"The Masking Engine Cluster is a group of Delphix Masking engines (version 6.0.7 and later) leveraged by the Hyperscale Compliance Engine to run large masking jobs in parallel. For installing and configuring the Masking engine procedures, see Masking Documentation .","title":"Masking Engine Cluster"},{"location":"#next-steps","text":"Read about Installing Hyperscale Compliance tar . Read about the Network Requirements of the Hyperscale Compliance . Read about Accessing the Hyperscale Compliance APIs .","title":"Next Steps"},{"location":"Limitations/","text":"Limitations Hyperscale Compliance has the following limitations: The communication between staging server, Hyperscale Compliance Engine, and Masking engine is supported only over NFS. Hyperscale Compliance only accepts delimited files as source files.","title":"Limitations"},{"location":"Limitations/#limitations","text":"Hyperscale Compliance has the following limitations: The communication between staging server, Hyperscale Compliance Engine, and Masking engine is supported only over NFS. Hyperscale Compliance only accepts delimited files as source files.","title":"Limitations"},{"location":"API_Reference/Hyperscale_Compliance_API/","text":"Hyperscale Compliance API The Hyperscale Compliance API is organized around REST. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs. REST Hyperscale Compliance API is a RESTful API. REST stands for REpresentational State Transfer. A REST API will allow you to access and manipulate a textual representation of objects and resources using a predefined set of operations to accomplish various tasks. JSON Hyperscale Compliance API uses JSON (JavaScript Object Notation) to ingest and return representations of the various objects used throughout various operations. JSON is a standard format and, as such, has many tools available to help with creating and parsing the request and response payloads, respectively. Here are some UNIX tools that can be used to parse JSON - Parsing JSON with Unix Tools . That being said, this is only the tip of the iceberg when it comes to JSON parsing and the reader is encouraged to use their method of choice. API Client The various operations and objects used to interact with APIs are defined in a specification document. This allows us to utilize various tooling to ingest that specification to generate documentation and an API Client, which can be used to generate cURL commands for all operations. Accessing the Hyperscale Compliance API For accessing the Hyperscale Compliance API, see Accessing the Hyperscale Compliance API . View the API reference To view the API client documentation, refer to the static HTML representations here: Hyperscale Compliance API 2.0 Documentation","title":"Hyperscale Compliance API"},{"location":"API_Reference/Hyperscale_Compliance_API/#hyperscale-compliance-api","text":"The Hyperscale Compliance API is organized around REST. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs. REST Hyperscale Compliance API is a RESTful API. REST stands for REpresentational State Transfer. A REST API will allow you to access and manipulate a textual representation of objects and resources using a predefined set of operations to accomplish various tasks. JSON Hyperscale Compliance API uses JSON (JavaScript Object Notation) to ingest and return representations of the various objects used throughout various operations. JSON is a standard format and, as such, has many tools available to help with creating and parsing the request and response payloads, respectively. Here are some UNIX tools that can be used to parse JSON - Parsing JSON with Unix Tools . That being said, this is only the tip of the iceberg when it comes to JSON parsing and the reader is encouraged to use their method of choice. API Client The various operations and objects used to interact with APIs are defined in a specification document. This allows us to utilize various tooling to ingest that specification to generate documentation and an API Client, which can be used to generate cURL commands for all operations.","title":"Hyperscale Compliance API"},{"location":"API_Reference/Hyperscale_Compliance_API/#accessing-the-hyperscale-compliance-api","text":"For accessing the Hyperscale Compliance API, see Accessing the Hyperscale Compliance API .","title":"Accessing the Hyperscale Compliance API"},{"location":"API_Reference/Hyperscale_Compliance_API/#view-the-api-reference","text":"To view the API client documentation, refer to the static HTML representations here: Hyperscale Compliance API 2.0 Documentation","title":"View the API reference"},{"location":"Configuration_Settings/Configuration_Settings/","text":"Configuration Settings The following table lists the Hyperscale Compliance properties with their default values. Group Property name Type Description Default value Hyperscale engines.certificate.path String Path of masking engine certificates /etc/config/cert root.config.path String Root path which Hyperscale will be looking into for source files /etc/hyperscale masking.file.formats String Path where Hyperscale will store masking file format files /masking-file-formats splitted.files.dir String Path where Hyperscale will store splitted source files ] /splitted-files target.dir String Path where Hyperscale will store masked files /tgt staging.dir String Path where Hyperscale will store masked files for splitted source files (this is relevant only if file merging of masked files is set to true) /stg remove.splitted.masked.files Boolean Flag to indicate retaining or removing staging splitted masked files true monitor.initial.delay Integer Masking job monitor delay in seconds 1 monitor.poll.duration Integer Masking job monitoring duration in seconds 10 scheduler.poll.duration Integer Job scheduler poll duration in seconds 60 intelligent.loadbalance.enabled Boolean Enable Intelligent load balancing/Round robin load balancing approach. By default, Intelligent load balancing is enabled true job.monitor.pool.corePoolSize Integer Defines number of thread pools created for Masking Job Monitor service 5 job.monitor.pool.maxPoolSize Integer Defines number of threads created in a pool for Masking Job Monitor service 20 job.monitor.pool.keepAliveSeconds Integer Defines keep alive time in second for threads of Masking Job Monitor 300 job.monitor.pool.queueCapacity Integer Defines maximum queue capacity of the pool 50 job.monitor.pool.threadPrefix String Thread name prefix for Masking Job Monitor threads JobMonitorTaskExecutor Spring Framework logging.level.root String Root Log level WARN logging.level.com.delphix.hyperscale String Custom log level for a package or class INFO logging.file.name String Log file name/path /opt/delphix/logs/hyperscale.log logging.pattern.file String Format of log entries %d{dd-MM-yyyy HH:mm:ss.SSS} \\[%thread\\] %-5level %logger{36}.%M - %msg%n logging.pattern.rolling-file-name String Archive log file name/path /opt/delphix/logs/archived/hyperscale-%d{yyyy-MM-dd}.%i.log logging.file.max-size String Maximum individual log file size before it will be archived (format 5MB, 100MB) 5MB logging.file.max-history integer History in days (i.e. keep 15 days\u2019 worth of history capped at 5GB total size) 15 logging.file.total-size-cap String Max total size that the archive folder can hold. 5GB How to Change the Hyperscale Properties You can set the above Hyperscale properties as environment variables in a Hyperscale Application Container using the \u2018environment\u2019 key inside the compose file i.e. docker-compose.yaml. You can locate the docker-compose.yaml file in the directory where the delphix-hyperscale-masking-dev.tar.gz is extracted. Note You must start or restart the container after overriding these properties in the docker-compose.yaml file. The below file describes the content of the docker-compose.yaml file after updating the Hyperscale properties. networks: hyperscale-net: {} services: hyperscale: environment: - API_KEY_CREATE=true - ENGINES_CERTIFICATE_PATH=/etc/config/cert - ROOT_CONFIG_PATH=/etc/hyperscale - MASKING_FILE_FORMATS=/masking-file-formats - SPLITTED_FILES_DIR=/splitted-files - TARGET_DIR=/tgt - STAGING_DIR=/stg - REMOVE_SPLITTED_MASKED_FILES=true - MONITOR_INITIAL_DELAY=1 - MONITOR_POLL_DURATION=10 - SCHEDULER_POLL_DURATION=60 - INTELLIGENT_LOADBALANCE_ENABLED=false image: delphix-hyperscale-masking-app:1 init: true networks: hyperscale-net: null restart: unless-stopped volumes: - hyperscale-data:/data:rw - /home/delphix/hyperscale_logs:/opt/delphix/logs:rw - /mnt/provision:/etc/hyperscale:rw proxy: depends_on: hyperscale: condition: service_started image: delphix-hyperscale-masking-proxy:1 init: true networks: hyperscale-net: null ports: - published: 443 target: 443 restart: unless-stopped version: '3.7' volumes: hyperscale-data: {}","title":"Configuration Settings"},{"location":"Configuration_Settings/Configuration_Settings/#configuration-settings","text":"The following table lists the Hyperscale Compliance properties with their default values. Group Property name Type Description Default value Hyperscale engines.certificate.path String Path of masking engine certificates /etc/config/cert root.config.path String Root path which Hyperscale will be looking into for source files /etc/hyperscale masking.file.formats String Path where Hyperscale will store masking file format files /masking-file-formats splitted.files.dir String Path where Hyperscale will store splitted source files ] /splitted-files target.dir String Path where Hyperscale will store masked files /tgt staging.dir String Path where Hyperscale will store masked files for splitted source files (this is relevant only if file merging of masked files is set to true) /stg remove.splitted.masked.files Boolean Flag to indicate retaining or removing staging splitted masked files true monitor.initial.delay Integer Masking job monitor delay in seconds 1 monitor.poll.duration Integer Masking job monitoring duration in seconds 10 scheduler.poll.duration Integer Job scheduler poll duration in seconds 60 intelligent.loadbalance.enabled Boolean Enable Intelligent load balancing/Round robin load balancing approach. By default, Intelligent load balancing is enabled true job.monitor.pool.corePoolSize Integer Defines number of thread pools created for Masking Job Monitor service 5 job.monitor.pool.maxPoolSize Integer Defines number of threads created in a pool for Masking Job Monitor service 20 job.monitor.pool.keepAliveSeconds Integer Defines keep alive time in second for threads of Masking Job Monitor 300 job.monitor.pool.queueCapacity Integer Defines maximum queue capacity of the pool 50 job.monitor.pool.threadPrefix String Thread name prefix for Masking Job Monitor threads JobMonitorTaskExecutor Spring Framework logging.level.root String Root Log level WARN logging.level.com.delphix.hyperscale String Custom log level for a package or class INFO logging.file.name String Log file name/path /opt/delphix/logs/hyperscale.log logging.pattern.file String Format of log entries %d{dd-MM-yyyy HH:mm:ss.SSS} \\[%thread\\] %-5level %logger{36}.%M - %msg%n logging.pattern.rolling-file-name String Archive log file name/path /opt/delphix/logs/archived/hyperscale-%d{yyyy-MM-dd}.%i.log logging.file.max-size String Maximum individual log file size before it will be archived (format 5MB, 100MB) 5MB logging.file.max-history integer History in days (i.e. keep 15 days\u2019 worth of history capped at 5GB total size) 15 logging.file.total-size-cap String Max total size that the archive folder can hold. 5GB","title":"Configuration Settings"},{"location":"Configuration_Settings/Configuration_Settings/#how-to-change-the-hyperscale-properties","text":"You can set the above Hyperscale properties as environment variables in a Hyperscale Application Container using the \u2018environment\u2019 key inside the compose file i.e. docker-compose.yaml. You can locate the docker-compose.yaml file in the directory where the delphix-hyperscale-masking-dev.tar.gz is extracted. Note You must start or restart the container after overriding these properties in the docker-compose.yaml file. The below file describes the content of the docker-compose.yaml file after updating the Hyperscale properties. networks: hyperscale-net: {} services: hyperscale: environment: - API_KEY_CREATE=true - ENGINES_CERTIFICATE_PATH=/etc/config/cert - ROOT_CONFIG_PATH=/etc/hyperscale - MASKING_FILE_FORMATS=/masking-file-formats - SPLITTED_FILES_DIR=/splitted-files - TARGET_DIR=/tgt - STAGING_DIR=/stg - REMOVE_SPLITTED_MASKED_FILES=true - MONITOR_INITIAL_DELAY=1 - MONITOR_POLL_DURATION=10 - SCHEDULER_POLL_DURATION=60 - INTELLIGENT_LOADBALANCE_ENABLED=false image: delphix-hyperscale-masking-app:1 init: true networks: hyperscale-net: null restart: unless-stopped volumes: - hyperscale-data:/data:rw - /home/delphix/hyperscale_logs:/opt/delphix/logs:rw - /mnt/provision:/etc/hyperscale:rw proxy: depends_on: hyperscale: condition: service_started image: delphix-hyperscale-masking-proxy:1 init: true networks: hyperscale-net: null ports: - published: 443 target: 443 restart: unless-stopped version: '3.7' volumes: hyperscale-data: {}","title":"How to Change the Hyperscale Properties"},{"location":"Getting_Started/Accessing_the_Hyperscale_Compliance_API/","text":"Accessing the Hyperscale Compliance API Open a web browser and type the following in the address bar: https://<orch ip>/static/index.html#/ . Replace orch ip with the IP address of the Hyperscale Compliance Engine VM. Authentication To authenticate with the Hyperscale Compliance Engine, you must use an API key. It is done by including the key in the HTTP Authorization request header with type apk. An example cURL command with the API Key looks like the following: curl --header 'Authorization: apk 1.t8YTjLyPiMatdtnhAw9RD0gRVZr2hFsrfikp3YxVl8URdB9zuaVHcMuhXkLd1TLj' As described in the HTTP Authorization request header documentation, following is the typical syntax for authorization header: Authorization: <auth-scheme> <authorisation-parameters> For Basic Authentication, You must include following header parameters: Authorization: Basic <credentials> For Bearer Authentication scheme, you must use the following: Authorization: Bearer <JWT Bearer Token> Creating an API Key An API key is a simple encrypted string that you can use when calling Hyperscale Compliance APIs. Note You must use the initial created API key to create a new secure key. It is done by creating a new API Client entity. The \u201cname\u201d attribute must be the desired name to uniquely identify the user of this key. For more information about initial created API key, refer to step 8 under the Generate a New Key section. Run the following command to create a new API key. curl -X 'POST' \\ 'https://<host-name>/v1/management/api-keys' \\ -H 'accept: application/json' \\ -H 'Authorization: apk 1.t8YTjLyPiMatdtnhAw9RD0gRVZr2hFsrfikp3YxVl8URdB9zuaVHcMuhXkLd1TLj' \\ -H 'Content-Type: application/json' \\ -d '{ \"name\": \"<name-of-key>\" }' The above command displays a response message similar to the following: { \"api_key_id\": 2, \"token\": \"2.ExZtmf6EN1xvFMsXpXlOyhHVYlTuFzCm2yGhpUOQQ5ID8N8oGz79d4yn8ZsPhF46\" } Since, you have created a new and secure API key, you must delete the old key for security reasons. Run the following command to delete the old key. curl -X 'DELETE' \\ 'https://<host-name>/v1/management/api-keys/1' \\ -H 'accept: */*' \\ -H 'Authorization: apk 2.ExZtmf6EN1xvFMsXpXlOyhHVYlTuFzCm2yGhpUOQQ5ID8N8oGz79d4yn8ZsPhF46' Using the Newly Generated Key After you delete the old key, revert the changes performed in step 5 of the Hyperscale Compliance Installation and restart docker-compose. You must be able to use the new key for authorization as follows: curl --header 'Authorization: apk 2.ExZtmf6EN1xvFMsXpXlOyhHVYlTuFzCm2yGhpUOQQ5ID8N8oGz79d4yn8ZsPhF46'","title":"Accessing the Hyperscale Compliance API"},{"location":"Getting_Started/Accessing_the_Hyperscale_Compliance_API/#accessing-the-hyperscale-compliance-api","text":"Open a web browser and type the following in the address bar: https://<orch ip>/static/index.html#/ . Replace orch ip with the IP address of the Hyperscale Compliance Engine VM.","title":"Accessing the Hyperscale Compliance API"},{"location":"Getting_Started/Accessing_the_Hyperscale_Compliance_API/#authentication","text":"To authenticate with the Hyperscale Compliance Engine, you must use an API key. It is done by including the key in the HTTP Authorization request header with type apk. An example cURL command with the API Key looks like the following: curl --header 'Authorization: apk 1.t8YTjLyPiMatdtnhAw9RD0gRVZr2hFsrfikp3YxVl8URdB9zuaVHcMuhXkLd1TLj' As described in the HTTP Authorization request header documentation, following is the typical syntax for authorization header: Authorization: <auth-scheme> <authorisation-parameters> For Basic Authentication, You must include following header parameters: Authorization: Basic <credentials> For Bearer Authentication scheme, you must use the following: Authorization: Bearer <JWT Bearer Token>","title":"Authentication"},{"location":"Getting_Started/Accessing_the_Hyperscale_Compliance_API/#creating-an-api-key","text":"An API key is a simple encrypted string that you can use when calling Hyperscale Compliance APIs. Note You must use the initial created API key to create a new secure key. It is done by creating a new API Client entity. The \u201cname\u201d attribute must be the desired name to uniquely identify the user of this key. For more information about initial created API key, refer to step 8 under the Generate a New Key section. Run the following command to create a new API key. curl -X 'POST' \\ 'https://<host-name>/v1/management/api-keys' \\ -H 'accept: application/json' \\ -H 'Authorization: apk 1.t8YTjLyPiMatdtnhAw9RD0gRVZr2hFsrfikp3YxVl8URdB9zuaVHcMuhXkLd1TLj' \\ -H 'Content-Type: application/json' \\ -d '{ \"name\": \"<name-of-key>\" }' The above command displays a response message similar to the following: { \"api_key_id\": 2, \"token\": \"2.ExZtmf6EN1xvFMsXpXlOyhHVYlTuFzCm2yGhpUOQQ5ID8N8oGz79d4yn8ZsPhF46\" } Since, you have created a new and secure API key, you must delete the old key for security reasons. Run the following command to delete the old key. curl -X 'DELETE' \\ 'https://<host-name>/v1/management/api-keys/1' \\ -H 'accept: */*' \\ -H 'Authorization: apk 2.ExZtmf6EN1xvFMsXpXlOyhHVYlTuFzCm2yGhpUOQQ5ID8N8oGz79d4yn8ZsPhF46'","title":"Creating an API Key"},{"location":"Getting_Started/Accessing_the_Hyperscale_Compliance_API/#using-the-newly-generated-key","text":"After you delete the old key, revert the changes performed in step 5 of the Hyperscale Compliance Installation and restart docker-compose. You must be able to use the new key for authorization as follows: curl --header 'Authorization: apk 2.ExZtmf6EN1xvFMsXpXlOyhHVYlTuFzCm2yGhpUOQQ5ID8N8oGz79d4yn8ZsPhF46'","title":"Using the Newly Generated Key"},{"location":"Getting_Started/Hyperscale_Compliance_Installation/","text":"Installation This section describes the steps you must perform to install the Hyperscale Compliance Engine. Hyperscale Compliance Installation Pre-requisites Ensure that you meet the following requirements before you install the Hyperscale Compliance Engine. Download the Hyperscale tar file ( delphix-hyperscale-masking-2.0.0.0.tar.gz ) from download.delphix.com . You must create a user that has permissions to install Docker and Docker compose. Install Docker on VM. Minimum supported docker version is 20.10.7. Install Docker compose on VM. Minimum supported docker-compose version is 1.29.2. Check if docker and docker-compose are installed by running following command: docker-compose -v The above command displays an output similar to the following: docker-compose version 1.29.2, build 5becea4c docker -v The above command displays an output similar to the following: Docker version 20.10.8, build 3967b7d Procedure Perform the following procedure to install the Hyperscale Compliance Engine. Unpack the Hyperscale tar file. tar -xzf delphix-hyperscale-masking-2.0.0.0.tar.gz Load the extracted tars into Docker. docker load --input app.tar docker load --input proxy.tar Create a mount on the Hyperscale Compliance Engine VM. The shared path on the mount server must have 777 permission recursively. Create a directory inside the local path (for example, <user.home>/hyperscale ) on the Hyperscale Compliance Engine VM. This path is the same local path that is configured in the docker-compose.yaml file in step 4. Create a sub-directory (for example, <user.home>/hyperscale/mount-dir ) within the directory created in the above step and mount the NFS shared storage here. This NFS shared storage is a \u2018Staging Area\u2019 for the Hyperscale Compliance and can be mounted in two ways as described in the NFS server Installation . Note The directory created in step 3c (mount-dir) will be provided as the mount name in the Mount Filesystem API. Configure the Hyperscale Compliance Engine container volume binding. Edit the docker-compose.yaml file from tar. In the Hyperscale Service Volumes section, add the Hyperscale Compliance Engine VM path (from 3(b), <user.home>/hyperscale ) to the Hyperscale Compliance Engine container path(/etc/hyperscale) volume binding. Configure the Hyperscale Compliance Engine container to create a new API key. Note This is a one-time key generation process. After you generate another key using this key, then you must revert these changes and restart docker-compose. Edit docker-compose.yaml file from tar. In the Hyperscale Service Environment section, set API_KEY_CREATE to string \u201ctrue\u201d. Info You must uncomment the API_KEY_CREATE=true line. A sample output of docker-compose.yaml file looks like the following: networks: hyperscale-net: {} services: hyperscale: image: delphix-hyperscale-masking-app:2.0.0.0 init: true networks: hyperscale-net: null restart: unless-stopped volumes: - hyperscale-data:/data:rw - /home/delphix/mount-files:/etc/hyperscale environment: - API_KEY_CREATE=true proxy: depends_on: hyperscale: condition: service_started image: delphix-hyperscale-masking-proxy:2.0.0.0 init: true networks: hyperscale-net: null ports: - published: 443 target: 443 restart: unless-stopped version: '3.7' volumes: hyperscale-data: {} (OPTIONAL) To modify the default Hyperscale configuration properties for the application, see Configuration Settings . Run the application from the same location where you extracted the docker-compose.yaml file. docker-compose up -d Run the following command to check if the application is running. The output of this command should show two containers up and running. docker-compose ps Run the following command to access application logs. docker logs -f <app_container_name> Note App container name can be accessed by output of the command docker-compose ps i.e. the name of the container running from docker image delphix-hyperscale-masking-app . Run the following command to stop the application (if required). sudo docker-compose down Generate a new key using the key generated in step 5. Run the following command to open the application logs. Docker logs -f delphix-hyperscale-1 The above command displays an output similar to the following: 20-12-2021 10:51:57.974 [main] INFO o.a.c.c.C.[Tomcat].[localhost].[/].log - Initializing Spring embedded WebApplicationContext 20-12-2021 10:51:57.974 [main] INFO o.s.b.w.s.c.ServletWebServerApplicationContext.prepareWebApplicationContext - Root WebApplicationContext: initialization completed in 3089 ms NEWLY GENERATED API KEY: 1.t8YTjLyPiMatdtnhAw9RD0gRVZr2hFsrfikp3YxVl8URdB9zuaVHcMuhXkLd1TLj The above logs output shows an API key has been created. You can use this key to authenticate with the Hyperscale Compliance Engine. For more ifnormation, see the Authentication section under Accessing the Hyperscale Compliance API . Masking Engine Installation Delphix Masking Engine is a multi-user, browser-based web application that provides complete, secure, and scalable software for your sensitive data discovery, masking, and tokenization needs while meeting enterprise-class infrastructure requirements. For information about installing the masking engine, see Masking Engine Installation documentation.","title":"Installation"},{"location":"Getting_Started/Hyperscale_Compliance_Installation/#installation","text":"This section describes the steps you must perform to install the Hyperscale Compliance Engine.","title":"Installation"},{"location":"Getting_Started/Hyperscale_Compliance_Installation/#hyperscale-compliance-installation","text":"","title":"Hyperscale Compliance Installation"},{"location":"Getting_Started/Hyperscale_Compliance_Installation/#pre-requisites","text":"Ensure that you meet the following requirements before you install the Hyperscale Compliance Engine. Download the Hyperscale tar file ( delphix-hyperscale-masking-2.0.0.0.tar.gz ) from download.delphix.com . You must create a user that has permissions to install Docker and Docker compose. Install Docker on VM. Minimum supported docker version is 20.10.7. Install Docker compose on VM. Minimum supported docker-compose version is 1.29.2. Check if docker and docker-compose are installed by running following command: docker-compose -v The above command displays an output similar to the following: docker-compose version 1.29.2, build 5becea4c docker -v The above command displays an output similar to the following: Docker version 20.10.8, build 3967b7d","title":"Pre-requisites"},{"location":"Getting_Started/Hyperscale_Compliance_Installation/#procedure","text":"Perform the following procedure to install the Hyperscale Compliance Engine. Unpack the Hyperscale tar file. tar -xzf delphix-hyperscale-masking-2.0.0.0.tar.gz Load the extracted tars into Docker. docker load --input app.tar docker load --input proxy.tar Create a mount on the Hyperscale Compliance Engine VM. The shared path on the mount server must have 777 permission recursively. Create a directory inside the local path (for example, <user.home>/hyperscale ) on the Hyperscale Compliance Engine VM. This path is the same local path that is configured in the docker-compose.yaml file in step 4. Create a sub-directory (for example, <user.home>/hyperscale/mount-dir ) within the directory created in the above step and mount the NFS shared storage here. This NFS shared storage is a \u2018Staging Area\u2019 for the Hyperscale Compliance and can be mounted in two ways as described in the NFS server Installation . Note The directory created in step 3c (mount-dir) will be provided as the mount name in the Mount Filesystem API. Configure the Hyperscale Compliance Engine container volume binding. Edit the docker-compose.yaml file from tar. In the Hyperscale Service Volumes section, add the Hyperscale Compliance Engine VM path (from 3(b), <user.home>/hyperscale ) to the Hyperscale Compliance Engine container path(/etc/hyperscale) volume binding. Configure the Hyperscale Compliance Engine container to create a new API key. Note This is a one-time key generation process. After you generate another key using this key, then you must revert these changes and restart docker-compose. Edit docker-compose.yaml file from tar. In the Hyperscale Service Environment section, set API_KEY_CREATE to string \u201ctrue\u201d. Info You must uncomment the API_KEY_CREATE=true line. A sample output of docker-compose.yaml file looks like the following: networks: hyperscale-net: {} services: hyperscale: image: delphix-hyperscale-masking-app:2.0.0.0 init: true networks: hyperscale-net: null restart: unless-stopped volumes: - hyperscale-data:/data:rw - /home/delphix/mount-files:/etc/hyperscale environment: - API_KEY_CREATE=true proxy: depends_on: hyperscale: condition: service_started image: delphix-hyperscale-masking-proxy:2.0.0.0 init: true networks: hyperscale-net: null ports: - published: 443 target: 443 restart: unless-stopped version: '3.7' volumes: hyperscale-data: {} (OPTIONAL) To modify the default Hyperscale configuration properties for the application, see Configuration Settings . Run the application from the same location where you extracted the docker-compose.yaml file. docker-compose up -d Run the following command to check if the application is running. The output of this command should show two containers up and running. docker-compose ps Run the following command to access application logs. docker logs -f <app_container_name> Note App container name can be accessed by output of the command docker-compose ps i.e. the name of the container running from docker image delphix-hyperscale-masking-app . Run the following command to stop the application (if required). sudo docker-compose down Generate a new key using the key generated in step 5. Run the following command to open the application logs. Docker logs -f delphix-hyperscale-1 The above command displays an output similar to the following: 20-12-2021 10:51:57.974 [main] INFO o.a.c.c.C.[Tomcat].[localhost].[/].log - Initializing Spring embedded WebApplicationContext 20-12-2021 10:51:57.974 [main] INFO o.s.b.w.s.c.ServletWebServerApplicationContext.prepareWebApplicationContext - Root WebApplicationContext: initialization completed in 3089 ms NEWLY GENERATED API KEY: 1.t8YTjLyPiMatdtnhAw9RD0gRVZr2hFsrfikp3YxVl8URdB9zuaVHcMuhXkLd1TLj The above logs output shows an API key has been created. You can use this key to authenticate with the Hyperscale Compliance Engine. For more ifnormation, see the Authentication section under Accessing the Hyperscale Compliance API .","title":"Procedure"},{"location":"Getting_Started/Hyperscale_Compliance_Installation/#masking-engine-installation","text":"Delphix Masking Engine is a multi-user, browser-based web application that provides complete, secure, and scalable software for your sensitive data discovery, masking, and tokenization needs while meeting enterprise-class infrastructure requirements. For information about installing the masking engine, see Masking Engine Installation documentation.","title":"Masking Engine Installation"},{"location":"Getting_Started/NFS_Server_Installation/","text":"NFS Server Installation The Hyperscale Compliance engine requires a Staging Area to read from the source file(s) and write to the target file(s). The Staging Area must be an NFS shared filesystem accessible to the Hyperscale Compliance engine and the masking engines. The following are the supported ways by which the filesystem can be shared over NFS(NFSv3/NFSv4): Delphix Virtualization Engine Empty VDB To create a Delphix Virtualization Engine empty VDB, follow the below procedure. Virtualization Engine Installation\u200b Delphix Virtualization Engine is a data management platform that provides the ability to securely copy and share datasets. Using virtualization, you will ingest your data sources and create virtual data copies, which are full read-write capable database instances that use a small fraction of the resources a normal database copy would require. For information about installing the Virtualization Engine, see Virtualization Engine Installation documentation. Discover and Configure Hyperscale Compliance Engine\u2019s Environment After installing and configuring the Virtualization Engine, make sure that the Network and Connectivity Requirements for using Empty VDB on Unix environments are met. Discover the Hyperscale Compliance engine\u2019s Unix host on the Virtulization\u2019s Engine Management application. For more information, see Adding a Unix Environment . Navigate to Manage > Environments to view the discovered Hyperscale Compliance engine\u2019s Unix host. After the discovery is completed, configure the same Unix host on the Environments screen such that the IP addresses of the Hyperscale Compliance engine\u2019s Unix host along with the masking engines part of the Masking Engine cluster are populated in the NFS Addresses field. This is done to ensure that the empty VDB is shared with both Hyperscale Compliance engine and the masking engines part of the Masking Engine cluster. Provision an Empty VDB Follow the steps listed under Create an Empty VDB for Unstructured Files in the Delphix Engine to provision an empty VDB on the discovered Hyperscale Compliance engine\u2019s Unix host. Note the mount path provided while provisioning the empty VDB as that is the path which will be used to fill the empty VDB with the source file(s) that the Hyperscale Compliance engine needs to mask and where the target masked file(s) will be placed. Note Hyperscale Compliance OS user should have read/write permissions on the mount point path where the empty VDB will be provisioned. The location of the mounted empty VDB on the Hyperscale Compliance engine\u2019s Unix host can be found with a simple \u2018grep\u2019 of the mount path, provided while provisioning the empty VDB, using the \u2018mount\u2019 utility: hyperscale-engine:~$ df -h | grep /mnt/provision/hyperscale_data 10.119.138.34:/domain0/group-2/appdata_container-3/appdata_timeflow-4/datafile 20T 3.5T 16T 18% /mnt/provision/hyperscale_data Copy the source file(s) to the location where the empty VDB has been mounted. NFS File Server An NFS shared filesystem can also be provided by a typical NFS server. Export a filesystem from the NFS file server such that the Hyperscale Compliance Engine and Masking Engines part of the Masking Engine Cluster have read and write permission on it. As such, the export entry should be of the following form based on the UID/GID corresponding to the owner of the shared path: <mount_path> <ip1,ip2,ip3,ipn>(rw,all_squash,anonuid=<uid>,anongid=<gid>) Export the NFS share using the below command: sudo exportfs -rav Once the NFS share is exported from the NFS server, proceed to mount the same share on the Hyperscale Compliance Engine host: sudo mount -t nfs -o vers=4 <nfs-server-host-ip>:<mount_path> <user.home>/hyperscale/mount-dir Storage Requirements for the NFS File Server Considering a single Hyperscale Compliance job execution, the Hyperscale Compliance Engine will create split files from the source file(s) and the target masked files. As such, the required storage will amount to 3X the size of the source file(s). If the File Merging is enabled as part of the Hyperscale Compliance job execution, then the required storage will amount to 4X the size of the source file(s).","title":"NFS Server Installation"},{"location":"Getting_Started/NFS_Server_Installation/#nfs-server-installation","text":"The Hyperscale Compliance engine requires a Staging Area to read from the source file(s) and write to the target file(s). The Staging Area must be an NFS shared filesystem accessible to the Hyperscale Compliance engine and the masking engines. The following are the supported ways by which the filesystem can be shared over NFS(NFSv3/NFSv4):","title":"NFS Server Installation"},{"location":"Getting_Started/NFS_Server_Installation/#delphix-virtualization-engine-empty-vdb","text":"To create a Delphix Virtualization Engine empty VDB, follow the below procedure.","title":"Delphix Virtualization Engine Empty VDB"},{"location":"Getting_Started/NFS_Server_Installation/#virtualization-engine-installation","text":"Delphix Virtualization Engine is a data management platform that provides the ability to securely copy and share datasets. Using virtualization, you will ingest your data sources and create virtual data copies, which are full read-write capable database instances that use a small fraction of the resources a normal database copy would require. For information about installing the Virtualization Engine, see Virtualization Engine Installation documentation.","title":"Virtualization Engine Installation\u200b"},{"location":"Getting_Started/NFS_Server_Installation/#discover-and-configure-hyperscale-compliance-engines-environment","text":"After installing and configuring the Virtualization Engine, make sure that the Network and Connectivity Requirements for using Empty VDB on Unix environments are met. Discover the Hyperscale Compliance engine\u2019s Unix host on the Virtulization\u2019s Engine Management application. For more information, see Adding a Unix Environment . Navigate to Manage > Environments to view the discovered Hyperscale Compliance engine\u2019s Unix host. After the discovery is completed, configure the same Unix host on the Environments screen such that the IP addresses of the Hyperscale Compliance engine\u2019s Unix host along with the masking engines part of the Masking Engine cluster are populated in the NFS Addresses field. This is done to ensure that the empty VDB is shared with both Hyperscale Compliance engine and the masking engines part of the Masking Engine cluster.","title":"Discover and Configure Hyperscale Compliance Engine\u2019s Environment"},{"location":"Getting_Started/NFS_Server_Installation/#provision-an-empty-vdb","text":"Follow the steps listed under Create an Empty VDB for Unstructured Files in the Delphix Engine to provision an empty VDB on the discovered Hyperscale Compliance engine\u2019s Unix host. Note the mount path provided while provisioning the empty VDB as that is the path which will be used to fill the empty VDB with the source file(s) that the Hyperscale Compliance engine needs to mask and where the target masked file(s) will be placed. Note Hyperscale Compliance OS user should have read/write permissions on the mount point path where the empty VDB will be provisioned. The location of the mounted empty VDB on the Hyperscale Compliance engine\u2019s Unix host can be found with a simple \u2018grep\u2019 of the mount path, provided while provisioning the empty VDB, using the \u2018mount\u2019 utility: hyperscale-engine:~$ df -h | grep /mnt/provision/hyperscale_data 10.119.138.34:/domain0/group-2/appdata_container-3/appdata_timeflow-4/datafile 20T 3.5T 16T 18% /mnt/provision/hyperscale_data Copy the source file(s) to the location where the empty VDB has been mounted.","title":"Provision an Empty VDB"},{"location":"Getting_Started/NFS_Server_Installation/#nfs-file-server","text":"An NFS shared filesystem can also be provided by a typical NFS server. Export a filesystem from the NFS file server such that the Hyperscale Compliance Engine and Masking Engines part of the Masking Engine Cluster have read and write permission on it. As such, the export entry should be of the following form based on the UID/GID corresponding to the owner of the shared path: <mount_path> <ip1,ip2,ip3,ipn>(rw,all_squash,anonuid=<uid>,anongid=<gid>) Export the NFS share using the below command: sudo exportfs -rav Once the NFS share is exported from the NFS server, proceed to mount the same share on the Hyperscale Compliance Engine host: sudo mount -t nfs -o vers=4 <nfs-server-host-ip>:<mount_path> <user.home>/hyperscale/mount-dir","title":"NFS File Server"},{"location":"Getting_Started/NFS_Server_Installation/#storage-requirements-for-the-nfs-file-server","text":"Considering a single Hyperscale Compliance job execution, the Hyperscale Compliance Engine will create split files from the source file(s) and the target masked files. As such, the required storage will amount to 3X the size of the source file(s). If the File Merging is enabled as part of the Hyperscale Compliance job execution, then the required storage will amount to 4X the size of the source file(s).","title":"Storage Requirements for the NFS File Server"},{"location":"Getting_Started/Network_Requirements/","text":"Network Requirements This section describes the network requirements for Hyperscale Compliance. Ensure that you meet all the network requirements before you install the Hyperscale Compliance Engine. The following are the inbound/outbound rules for the Hyperscale Compliance Engine: Type (Inbound/Outbound) Port Reason Inbound and Outbound 80 HTTP connections to/from the Hyperscale Compliance Engine to/from the Masking Engines part of the Masking Engine Cluster and to access the Hyperscale Compliance API. Inbound and Outbound 443 HTTPs connections to/from the Hyperscale Compliance Engine to/from the Masking Engines part of the Masking Engine Cluster and to access the Hyperscale Compliance API. Outbound 53 Connections to local DNS servers. Inbound 22 SSH connections to the Hyperscale Compliance Engine host. Hyperscale Compliance Engine Host Requirement on Linux Type Host Requirement Explanation User A user (hyperscale_os) with the following permissions are required: Should have permissions to install docker and docker-compose. Should be part of the \u2018docker\u2019 OS group or must have the permission to run docker and docker-compose commands. Permission to run mount, unmount, mkdir, rmdir, and ping as a super-user with NOPASSWD. This will be a primary user responsible to install and operate the Hyperscale Compliance. Installation Directory There must be a directory on the Hyperscale Compliance Engine host where the Hyperscale Compliance can be installed. This is a directory where the Hyperscale Compliance tar archive file will be placed and extracted. The extracted artifacts will include docker images(tar archive files) and a configuration file(docker-compose.yaml) that will be used to install the Hyperscale Compliance. Log File Directory An optional directory to place log files. This directory (can be configured via docker-compose.yaml configuration file) will host the runtime/log files of the Hyperscale Compliance Engine. NFS Client Services NFS client services must be enabled on the host. NFS client service is required to be able to mount an NFS shared storage from where the Hyperscale Compliance Engine will be able to read the source files and write the target files. For more information, see NFS Server Installation . Network Connectivity The Hyperscale Compliance Engine must be able to communicate with each node of the Masking Engine Cluster on port 443 or 80 (not recommended). A user can initiate the following tests from the orch_host_checker.sh script to check: OS and Host permissions/access Network Port Checks The orch_os user must have sufficient permissions to execute basic connectivity commands on the OS (ping, ip address, traceroute, etc.). Hardware Requirements Minimum: 8 vCPU, 8 GB of memory, 100GB data disk. Recommended: 16 vCPU, 32GB of memory, 500GB data disk. OS disk space: 50 GB","title":"Network Requirements"},{"location":"Getting_Started/Network_Requirements/#network-requirements","text":"This section describes the network requirements for Hyperscale Compliance. Ensure that you meet all the network requirements before you install the Hyperscale Compliance Engine. The following are the inbound/outbound rules for the Hyperscale Compliance Engine: Type (Inbound/Outbound) Port Reason Inbound and Outbound 80 HTTP connections to/from the Hyperscale Compliance Engine to/from the Masking Engines part of the Masking Engine Cluster and to access the Hyperscale Compliance API. Inbound and Outbound 443 HTTPs connections to/from the Hyperscale Compliance Engine to/from the Masking Engines part of the Masking Engine Cluster and to access the Hyperscale Compliance API. Outbound 53 Connections to local DNS servers. Inbound 22 SSH connections to the Hyperscale Compliance Engine host.","title":"Network Requirements"},{"location":"Getting_Started/Network_Requirements/#hyperscale-compliance-engine-host-requirement-on-linux","text":"Type Host Requirement Explanation User A user (hyperscale_os) with the following permissions are required: Should have permissions to install docker and docker-compose. Should be part of the \u2018docker\u2019 OS group or must have the permission to run docker and docker-compose commands. Permission to run mount, unmount, mkdir, rmdir, and ping as a super-user with NOPASSWD. This will be a primary user responsible to install and operate the Hyperscale Compliance. Installation Directory There must be a directory on the Hyperscale Compliance Engine host where the Hyperscale Compliance can be installed. This is a directory where the Hyperscale Compliance tar archive file will be placed and extracted. The extracted artifacts will include docker images(tar archive files) and a configuration file(docker-compose.yaml) that will be used to install the Hyperscale Compliance. Log File Directory An optional directory to place log files. This directory (can be configured via docker-compose.yaml configuration file) will host the runtime/log files of the Hyperscale Compliance Engine. NFS Client Services NFS client services must be enabled on the host. NFS client service is required to be able to mount an NFS shared storage from where the Hyperscale Compliance Engine will be able to read the source files and write the target files. For more information, see NFS Server Installation . Network Connectivity The Hyperscale Compliance Engine must be able to communicate with each node of the Masking Engine Cluster on port 443 or 80 (not recommended). A user can initiate the following tests from the orch_host_checker.sh script to check: OS and Host permissions/access Network Port Checks The orch_os user must have sufficient permissions to execute basic connectivity commands on the OS (ping, ip address, traceroute, etc.). Hardware Requirements Minimum: 8 vCPU, 8 GB of memory, 100GB data disk. Recommended: 16 vCPU, 32GB of memory, 500GB data disk. OS disk space: 50 GB","title":"Hyperscale Compliance Engine Host Requirement on Linux"},{"location":"Getting_Started/Support_Matrix/","text":"Supported Platforms Delphix supports Hyperscale Compliance for many data platforms and operating system. Supported Masking Engine 6.0.12.1 Note All Masking engines must be of the same versions and must be used only by Hyperscale Compliance for masking. Already existing or running masking/profiling jobs on masking engines would impact Hyperscale Compliance performance and results. Supported Browsers (Only API Client) Hyperscale Compliance API Client is using Swagger UI-3.48.0 that works in the latest versions of Chrome, Safari, Firefox, and Edge. For more information about the supported browser versions, see the Browser Support section at Github . Note If you are using Google Chrome, you may encounter the following error code: Chrome NET::ERR_CERT_INVALID. To resolve the above error, perform the following steps: Type https://<orch ip>/static/index.html#/ in the address bar and click Enter . Right-click on the page and click Inspect . Click the Console tab and run the following command: sendCommand(SecurityInterstitialCommandId.CMD_PROCEED) . Click on Authorize and provide the key. For more information about the key, refer to step 7 in Generate a New Key .","title":"Supported Platforms"},{"location":"Getting_Started/Support_Matrix/#supported-platforms","text":"Delphix supports Hyperscale Compliance for many data platforms and operating system.","title":"Supported Platforms"},{"location":"Getting_Started/Support_Matrix/#supported-masking-engine","text":"6.0.12.1 Note All Masking engines must be of the same versions and must be used only by Hyperscale Compliance for masking. Already existing or running masking/profiling jobs on masking engines would impact Hyperscale Compliance performance and results.","title":"Supported Masking Engine"},{"location":"Getting_Started/Support_Matrix/#supported-browsers-only-api-client","text":"Hyperscale Compliance API Client is using Swagger UI-3.48.0 that works in the latest versions of Chrome, Safari, Firefox, and Edge. For more information about the supported browser versions, see the Browser Support section at Github . Note If you are using Google Chrome, you may encounter the following error code: Chrome NET::ERR_CERT_INVALID. To resolve the above error, perform the following steps: Type https://<orch ip>/static/index.html#/ in the address bar and click Enter . Right-click on the page and click Inspect . Click the Console tab and run the following command: sendCommand(SecurityInterstitialCommandId.CMD_PROCEED) . Click on Authorize and provide the key. For more information about the key, refer to step 7 in Generate a New Key .","title":"Supported Browsers (Only API Client)"},{"location":"Release_Notes/About_This_Release/","text":"About this Release Version 2.0.0 is the initial release of Hyperscale Compliance. Hyperscale Compliance is an API-based interface that is designed to enhance the performance of masking large datasets. It allows you to achieve faster masking results using the existing Delphix Masking offering without adding the complexity of configuring multiple jobs. For more information about Hyperscale Compliance Architecture, see Hyperscale Compliance Architecture .","title":"About This Release"},{"location":"Release_Notes/About_This_Release/#about-this-release","text":"Version 2.0.0 is the initial release of Hyperscale Compliance. Hyperscale Compliance is an API-based interface that is designed to enhance the performance of masking large datasets. It allows you to achieve faster masking results using the existing Delphix Masking offering without adding the complexity of configuring multiple jobs. For more information about Hyperscale Compliance Architecture, see Hyperscale Compliance Architecture .","title":"About this Release"},{"location":"Release_Notes/Known_Issues/","text":"Known Issues This section describes known issues fixed in Hyperscale Compliance. Release 2.0.0 The following is a list of the known issues in the Hyperscale Compliance version 2.0.0. Key Summary Workaround HM-294 Updated file format is not POST\u2019ed on the Masking Engine if file format name is same After modifying the file format content, rename the file name of the file format. Delete the existing uploaded file format from the attached Masking Engines before executing the Hyperscale job with an updated file format. HM-291 Hyperscale job execution with intelligent load balancer configured is stuck in a loop if job\u2019s max memory is more than totalAllocatedMemoryForJobs None HM-216 POST/PUT /data-sets accepts duplicate values as source_files path in Single File Info Object None HM-177 Able to POST /hyperscale-masking/jobs with min job memory > max job memory None","title":"Known Issues"},{"location":"Release_Notes/Known_Issues/#known-issues","text":"This section describes known issues fixed in Hyperscale Compliance.","title":"Known Issues"},{"location":"Release_Notes/Known_Issues/#release-200","text":"The following is a list of the known issues in the Hyperscale Compliance version 2.0.0. Key Summary Workaround HM-294 Updated file format is not POST\u2019ed on the Masking Engine if file format name is same After modifying the file format content, rename the file name of the file format. Delete the existing uploaded file format from the attached Masking Engines before executing the Hyperscale job with an updated file format. HM-291 Hyperscale job execution with intelligent load balancer configured is stuck in a loop if job\u2019s max memory is more than totalAllocatedMemoryForJobs None HM-216 POST/PUT /data-sets accepts duplicate values as source_files path in Single File Info Object None HM-177 Able to POST /hyperscale-masking/jobs with min job memory > max job memory None","title":"Release 2.0.0"}]}